plugins {
	id 'com.android.application'
	id 'kotlin-android'
	id 'kotlin-kapt'
}

//apply plugin: 'com.android.application'
//apply plugin: 'kotlin-android'
//apply plugin: 'kotlin-kapt'

android {
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
//	kotlinOptions {
//		jvmTarget = '1.8'
//	}
//	kotlin {
//		jvmToolchain(8)
//	}
	namespace 'com.perry.audiorecorder'
	compileSdkVersion 34
	defaultConfig {
		applicationId "com.perry.audiorecorder"
		minSdkVersion 24
		targetSdkVersion 34
		versionCode 1
		versionName appVersionName
		flavorDimensions "versionCode"
	}

	buildFeatures {
		viewBinding true
	}

	def keystorePropertiesFile = rootProject.file("keystore.properties")
	def keystoreProperties = new Properties()
	keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

	signingConfigs {
		config {
			keyAlias 'lipengjun'
			keyPassword 'lipengjun'
			storeFile file('../lipengjun.keystore')
			storePassword 'lipengjun'
		}
	}

	buildTypes {
		release {
			debuggable true
			//            是否进行混淆
			minifyEnabled true
			shrinkResources true
			//            混淆文件 第一个是系统混淆文件 第二个是自定义混淆文件
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			signingConfig signingConfigs.config
//			firebaseCrashlytics {
//				mappingFileUploadEnabled true
//			}
		}
		debug {
			minifyEnabled false
			signingConfig signingConfigs.config
		}
	}

	productFlavors {
//		debugConfig {
////			dimension "default"
//			applicationId "com.perry.audiorecorder.debug"
//			signingConfig = signingConfigs.config
//		}
		releaseConfig {
//			dimension "default"
			signingConfig = signingConfigs.config
			applicationId "com.perry.audiorecorder"
			manifestPlaceholders = [app_name: "无涯"]
		}
	}

	compileOptions {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
	}

	lintOptions {
		abortOnError false
	}

	android.applicationVariants.all {
		variant ->
			variant.outputs.all {
				//只处理生产版本
//                if (buildType.name == 'release') {
//                    def createTime = new Date().format("YYYY-MM-dd-HHmm", TimeZone.getTimeZone("GMT+08:00"))
				// app包名称
//          outputFileName = "${productFlavors.manifestPlaceholders.app_name}"+ productFlavors.applicationId +"_" + defaultConfig.versionName + "_" + buildType.name + ".apk"
				outputFileName = "${productFlavors.manifestPlaceholders.app_name}" + "" + defaultConfig.versionName + "_" + buildType.name + ".apk"
				////指定release输出到指定文件夹
//                    variant.getPackageApplication().outputDirectory = new File(config.appReleaseDir + "/${createTime}")
//                }
			}
	}

}

//tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile.class){
//	kotlinOptions {
//		jvmTarget = "1.8"
//	}
//}

// Remove not needed buildVariants.
//android.variantFilter { variant ->
//	if (variant.buildType.name == 'release'
//			&& variant.getFlavors().get(0).name == 'debugConfig') {
//		variant.setIgnore(true)
//	}
//	if (variant.buildType.name == 'debug'
//			&& variant.getFlavors().get(0).name == 'releaseConfig') {
//		variant.setIgnore(true)
//	}
//}


def getAppVersionName() {
	def createTime = new Date().format("yyyy.MM.dd-HH.mm", TimeZone.getTimeZone("GMT+08:00"))
	String versionName = createTime
	return versionName
}
def appVersionName = getAppVersionName()

dependencies {
	def androidX = "1.3.0"
	def coroutines = "1.6.1"
	def timber = "5.0.1"
	implementation fileTree(dir: 'libs', include: ['*.jar'])
	implementation files('libs/AIKit.aar')
//	implementation project(path: ':paddleSpeech')
//	implementation project(path: ':paddlespeech_tts_cpp')
	//Kotlin
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"

	//Timber
	api "com.jakewharton.timber:timber:$timber"
	api "androidx.recyclerview:recyclerview:$androidX"

	implementation "androidx.viewpager2:viewpager2:1.0.0"
	implementation 'androidx.appcompat:appcompat:1.6.1'
	implementation 'com.google.android.material:material:1.10.0'
	implementation 'org.xutils:xutils:3.9.0'
	implementation 'com.alibaba.fastjson2:fastjson2:2.0.42.android4'

	//    数据库 DBFlow
//	annotationProcessor "com.github.Raizlabs.DBFlow:dbflow-processor:4.2.4"
	kapt "com.github.Raizlabs.DBFlow:dbflow-processor:4.2.4"
	implementation "com.github.Raizlabs.DBFlow:dbflow-core:4.2.4"
	implementation "com.github.Raizlabs.DBFlow:dbflow:4.2.4"
}
